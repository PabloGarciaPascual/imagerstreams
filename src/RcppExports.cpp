// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "imagerstreams_types.h"
#include "../inst/include/imagerstreams.h"
#include "../inst/include/imagerstreams_types.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// open_display
XPtr<cimg_library::CImgDisplay> open_display(int width, int height, std::string title);
RcppExport SEXP imagerstreams_open_display(SEXP widthSEXP, SEXP heightSEXP, SEXP titleSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< std::string >::type title(titleSEXP);
    __result = Rcpp::wrap(open_display(width, height, title));
    return __result;
END_RCPP
}
// close_display
void close_display(Rcpp::XPtr<cimg_library::CImgDisplay> dsp);
RcppExport SEXP imagerstreams_close_display(SEXP dspSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cimg_library::CImgDisplay> >::type dsp(dspSEXP);
    close_display(dsp);
    return R_NilValue;
END_RCPP
}
// display_show
void display_show(Rcpp::XPtr<cimg_library::CImgDisplay> dsp, NumericVector im);
RcppExport SEXP imagerstreams_display_show(SEXP dspSEXP, SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cimg_library::CImgDisplay> >::type dsp(dspSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    display_show(dsp, im);
    return R_NilValue;
END_RCPP
}
// open_stream
XPtr<cv::VideoCapture> open_stream(std::string file);
RcppExport SEXP imagerstreams_open_stream(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    __result = Rcpp::wrap(open_stream(file));
    return __result;
END_RCPP
}
// open_camera
XPtr<cv::VideoCapture> open_camera(int device);
RcppExport SEXP imagerstreams_open_camera(SEXP deviceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    __result = Rcpp::wrap(open_camera(device));
    return __result;
END_RCPP
}
// close_stream
void close_stream(Rcpp::XPtr<cv::VideoCapture> cap);
RcppExport SEXP imagerstreams_close_stream(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cv::VideoCapture> >::type cap(capSEXP);
    close_stream(cap);
    return R_NilValue;
END_RCPP
}
// stream_skipto
void stream_skipto(Rcpp::XPtr<cv::VideoCapture> cap, int frame);
RcppExport SEXP imagerstreams_stream_skipto(SEXP capSEXP, SEXP frameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cv::VideoCapture> >::type cap(capSEXP);
    Rcpp::traits::input_parameter< int >::type frame(frameSEXP);
    stream_skipto(cap, frame);
    return R_NilValue;
END_RCPP
}
// stream_info
Rcpp::List stream_info(Rcpp::XPtr<cv::VideoCapture> cap);
RcppExport SEXP imagerstreams_stream_info(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cv::VideoCapture> >::type cap(capSEXP);
    __result = Rcpp::wrap(stream_info(cap));
    return __result;
END_RCPP
}
// stream_status
Rcpp::List stream_status(Rcpp::XPtr<cv::VideoCapture> cap);
RcppExport SEXP imagerstreams_stream_status(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cv::VideoCapture> >::type cap(capSEXP);
    __result = Rcpp::wrap(stream_status(cap));
    return __result;
END_RCPP
}
// next_frame
NumericVector next_frame(Rcpp::XPtr<cv::VideoCapture> cap);
RcppExport SEXP imagerstreams_next_frame(SEXP capSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::XPtr<cv::VideoCapture> >::type cap(capSEXP);
    __result = Rcpp::wrap(next_frame(cap));
    return __result;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int imagerstreams_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP imagerstreams_RcppExport_registerCCallable() { 
    R_RegisterCCallable("imagerstreams", "imagerstreams_RcppExport_validate", (DL_FUNC)imagerstreams_RcppExport_validate);
    return R_NilValue;
}
